"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const common_1 = require("@angular/common");
const edit_employee_component_1 = require("./edit-employee.component");
const testing_2 = require("@angular/router/testing");
const dashboard_component_1 = require("../dashboard/dashboard.component");
const employee_service_1 = require("../employee.service");
const rxjs_1 = require("rxjs");
const employee_1 = require("../model/employee");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const core_1 = require("@angular/core");
describe('EditEmployeeComponent', () => {
    let component;
    let fixture;
    let location;
    let route;
    let employeService = {
        getEmployee: function (email) {
            return rxjs_1.of(null);
        },
        updateEmployee: function (employee) {
            return rxjs_1.of(employee);
        }
    };
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            declarations: [edit_employee_component_1.EditEmployeeComponent],
            imports: [
                testing_2.RouterTestingModule.withRoutes([{
                        path: '', pathMatch: 'full', component: dashboard_component_1.DashboardComponent
                    }]),
                forms_1.FormsModule
            ],
            schemas: [core_1.CUSTOM_ELEMENTS_SCHEMA],
            providers: [
                {
                    provide: employee_service_1.EmployeeService,
                    useValue: employeService
                }
            ]
        })
            .compileComponents();
    });
    beforeEach(() => {
        fixture = testing_1.TestBed.createComponent(edit_employee_component_1.EditEmployeeComponent);
        component = fixture.componentInstance;
        location = testing_1.TestBed.get(common_1.Location);
        route = testing_1.TestBed.get(router_1.ActivatedRoute);
    });
    it('should create', () => {
        fixture.detectChanges();
        expect(component).toBeTruthy();
    });
    function sampleEmployee() {
        const employee = new employee_1.Employee();
        employee.email = 'test@test.com',
            employee.firstName = 'test1';
        employee.lastName = 'test2';
        employee.location = 'test';
        employee.phone = '12345';
        employee.title = 'Manager';
        return employee;
    }
    it('should get employee when employee service could get employee', () => {
        // GIVEN
        const spyRoute = spyOn(route.snapshot.paramMap, 'get');
        spyRoute.and.returnValue('test@test.com');
        const spyService = spyOn(employeService, 'getEmployee');
        const employee = sampleEmployee();
        // WHEN
        spyService.and.returnValue(rxjs_1.of(employee));
        fixture.detectChanges();
        // THEN
        expect(component.employee).toBeTruthy();
        expect(component.errorMessage).toBeFalsy();
        expect(component.employee.firstName).toBe(employee.firstName);
        expect(component.employee.lastName).toBe(employee.lastName);
        expect(component.employee.location).toBe(employee.location);
        expect(component.employee.phone).toBe(employee.phone);
        expect(component.employee.title).toBe(employee.title);
        expect(component.employee.email).toBe(employee.email);
    });
    it('should show error message when employee service fail to get employee', () => {
        // GIVEN
        const spyRoute = spyOn(route.snapshot.paramMap, 'get');
        spyRoute.and.returnValue('test@test.com');
        const spyService = spyOn(employeService, 'getEmployee');
        // WHEN
        spyService.and.returnValue(rxjs_1.throwError(new Error('no employee')));
        fixture.detectChanges();
        expect(component.errorMessage).toBe('No employee with Email: test@test.com');
        expect(component.employee).toBeFalsy();
    });
    it('should go to home page after update employee', () => {
        // GIVEN
        const spyService = spyOn(employeService, 'updateEmployee');
        const employee = sampleEmployee();
        spyService.and.returnValue(rxjs_1.of(employee));
        // WHEN
        component.onSubmit();
        expect(location.path()).toBe('');
    });
});
//# sourceMappingURL=data:application/json;base64,