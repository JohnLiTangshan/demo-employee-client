"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app_po_1 = require("./app.po");
const protractor_1 = require("protractor");
const employee_1 = require("./employee");
function sampleEmployee() {
    const employee = new employee_1.Employee();
    employee.email = 'test@test.com',
        employee.firstName = 'test1';
    employee.lastName = 'test2';
    employee.department = 'Test';
    employee.location = 'test';
    employee.phone = '12345';
    employee.title = 'Manager';
    return employee;
}
describe('workspace-project App', () => {
    let page;
    beforeEach(() => {
        page = new app_po_1.AppPage();
    });
    it('should display welcome message', () => {
        page.navigateTo();
        expect(page.getTitleText()).toEqual('Welcome to Employee Information System');
    });
    it('should go to add employee page after click Add Employee button', () => {
        page.navigateTo();
        page.toAddEmployee();
        expect(page.addEmployeeBtn().isDisplayed()).toBe(true);
    });
    it('should disable Add employee button when email is not correct format', () => {
        page.navigateTo();
        page.toAddEmployee();
        const employee = sampleEmployee();
        employee.email = "test";
        page.enterNewEmployeeInfo(employee);
        expect(page.addEmployeeBtn().isEnabled()).toBe(false);
    });
    it('should enable Add employee button when employee info is correct', () => {
        page.navigateTo();
        page.toAddEmployee();
        const employee = sampleEmployee();
        page.enterNewEmployeeInfo(employee);
        expect(page.addEmployeeBtn().isEnabled()).toBe(true);
    });
    function deleteEmployee(email) {
        page.getDeleteEmployeeButton(email).click();
    }
    it('should be able to add one employee and delete', () => {
        page.navigateTo();
        page.toAddEmployee();
        const employee = sampleEmployee();
        page.enterNewEmployeeInfo(employee);
        page.addEmployeeBtn().click();
        expect(page.getEmailInTable(employee.email).isDisplayed()).toBe(true);
        deleteEmployee(employee.email);
        expect(page.getEmailInTable(employee.email).isPresent()).toBe(false);
    });
    it('should be able to update one employee', () => {
        page.navigateTo();
        page.toAddEmployee();
        const employee = sampleEmployee();
        page.enterNewEmployeeInfo(employee);
        page.addEmployeeBtn().click();
        page.getEditEmployeeButton(employee.email).click();
        employee.firstName = "DEMO";
        page.updateEmployeeInfo(employee);
        page.getUpdateEmployeeButton().click();
        expect(page.getFirstNameInTable(employee.email).getText()).toBe("DEMO");
        deleteEmployee(employee.email);
    });
    afterEach(async () => {
        // Assert that there are no errors emitted from the browser
        const logs = await protractor_1.browser.manage().logs().get(protractor_1.logging.Type.BROWSER);
        expect(logs).not.toContain(jasmine.objectContaining({
            level: protractor_1.logging.Level.SEVERE,
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,